---
// src/components/ProjectsSection.astro
const projects = [
  {
    title: "Therakey",
    role: "Project Co-Lead",
    date: "Oct 2023 - June 2024",
    description: "Co-led development of an arthritis rehabilitation device, designing hardware circuits and writing firmware.",
    tags: ["Embedded C", "Raspberry Pico", "Hardware Design", "Rehabilitation Tech"],
    details: `
      <h4 class='text-lg font-semibold mb-2'>Project Details</h4>
      <p class='mb-2'>This project involved designing and building a proof-of-concept device aimed at aiding arthritis rehabilitation.</p>
      <p class='mb-2'>My responsibilities included:</p>
      <ul class='list-disc list-inside mb-2'>
        <li>Co-leading the project team.</li>
        <li>Designing the hardware circuits for the device.</li>
        <li>Developing the firmware in C for the Raspberry Pico microcontroller.</li>
        <li>Integrating various hardware components.</li>
      </ul>
      <p>Technologies Used: C, Raspberry Pico, Embedded Systems, KiCad (example).</p>
    `,
    link: "#", 
  },
  // Add more project objects here...
];
---

<section id="projects" class="py-16 md:py-24 bg-gray-800/30">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold text-center mb-12 animate-on-scroll">
      Projects & Experience Highlights
    </h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {projects.map((project, index) => (
        <div class={`project-card bg-gray-800 p-6 rounded-lg shadow-xl flex flex-col animate-on-scroll delay-${index * 100} cursor-pointer`}
             data-modal-trigger={`project-modal-${index}`}
        > 
          <h3 class="text-xl font-bold mb-2 text-teal-400">{project.title}</h3>
          <p class="text-sm text-gray-400 mb-1">{project.role} {project.date ? `| ${project.date}` : ''}</p>
          <p class="text-gray-300 mb-4 flex-grow">{project.description}</p>
          <div class="mt-auto pt-4 border-t border-gray-700/50">
            <div class="flex flex-wrap gap-2 mb-4">
              {project.tags.map(tag => (
                <span class="text-sm font-semibold text-teal-300">{tag}</span>
              ))}
            </div>
            <span class="text-teal-400 hover:text-teal-300 text-sm font-semibold">
              Learn More →
            </span>
          </div>

          <!-- Hidden detailed content -->
          <div class="project-details hidden" set:html={project.details}></div>
        </div>
      ))}
    </div>
  </div>
</section>

<!-- Modal Structure -->
<div id="project-modal-backdrop" class="fixed inset-0 bg-black bg-opacity-75 hidden z-40"></div>
<div id="project-modal" class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-gray-800 p-6 md:p-8 rounded-lg shadow-xl z-50 w-11/12 md:w-3/4 lg:w-1/2 max-h-[80vh] overflow-y-auto hidden">
    <button id="project-modal-close" class="absolute top-3 right-3 text-gray-400 hover:text-white text-2xl">×</button>
    <div id="project-modal-content">
        <!-- Content will be injected here by JavaScript -->
    </div>
</div>

<script>
  // --- GSAP Animation Script (Keep as is) ---
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);
  document.addEventListener('DOMContentLoaded', () => { /* ... GSAP code ... */ });
  // --- End GSAP Animation Script ---

  // --- Modal Logic Script ---
  document.addEventListener('DOMContentLoaded', () => {
    const modalBackdrop = document.getElementById('project-modal-backdrop');
    const modal = document.getElementById('project-modal');
    const modalContent = document.getElementById('project-modal-content');
    const closeModalButton = document.getElementById('project-modal-close');
    const projectCards = document.querySelectorAll('.project-card[data-modal-trigger]');

    // TypeScript fix: Explicitly define the type for `contentHtml`
    function openModal(contentHtml: string) {
      // Check if modalContent exists before accessing it
      if (modalContent) {
        modalContent.innerHTML = contentHtml;
        // Ensure modalBackdrop and modal exist before manipulating them
        if (modalBackdrop) {
          modalBackdrop.classList.remove('hidden');
        }
        if (modal) {
          modal.classList.remove('hidden');
        }
        document.body.style.overflow = 'hidden'; // Prevent background scrolling
      }
    }

    function closeModal() {
      // Check for nulls before accessing modal and modalBackdrop
      if (modalBackdrop && modal) {
        modalBackdrop.classList.add('hidden');
        modal.classList.add('hidden');
        if (modalContent) {
          modalContent.innerHTML = ''; // Clear content
        }
        document.body.style.overflow = ''; // Restore background scrolling
      }
    }

    projectCards.forEach(card => {
      card.addEventListener('click', () => {
        const detailsDiv = card.querySelector('.project-details');
        if (detailsDiv) {
          openModal(detailsDiv.innerHTML); // Inject details into the modal
        }
      });
    });

    if (closeModalButton) {
      closeModalButton.addEventListener('click', closeModal);
    }
    if (modalBackdrop) {
      modalBackdrop.addEventListener('click', closeModal);
    }

    // Close modal on Escape key press
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });
  });
  // --- End Modal Logic Script ---
</script>
