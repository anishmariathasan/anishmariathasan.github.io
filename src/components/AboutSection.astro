---
// src/components/AboutSection.astro
// No props needed for this static section currently
---
<section id="about" class="py-16 md:py-24">
  <div class="container mx-auto px-4 max-w-3xl text-left">
    <h2 class="text-3xl md:text-4xl font-bold mb-6 animate-on-scroll text-center">
      About Me
    </h2>
    <div class="text-lg md:text-xl text-black leading-relaxed space-y-6 animate-on-scroll delay-100">
      <p>
        I'm a student at Imperial, who loves working on exciting new problems with cracked people.
      </p>
      <p>
        Beyond academics and internships, I co-founded a socio-altruistic startup which grew in the Kickstart Global incubator and take leadership roles in societies at Imperial. I'm always eager to learn and contribute to innovative projects, especially in the AI in healthcare/tech startup space. Currently I'm working on a medtech startup which we're super excited about (still in stealth as of now).
      </p>
      <p class="font-medium">
        I'd love for you to reach out if you want to discuss a new idea you're working on, the work I've done, or anything else!
      </p>
    </div>

    <div class="mt-20 p-6 bg-gray-100 rounded-lg shadow-sm animate-on-scroll delay-200">
      <h3 class="text-2xl md:text-3xl font-bold mb-6 text-center">What I'm Best At</h3>
      <div class="text-lg md:text-xl text-black leading-relaxed space-y-6">
        <p>
          My experience spans software engineering, deep learning, firmware, and hardware development. I enjoy the full development cycle, from conceptualisation and hardware design to software implementation and data analysis. I'm fascinated by explainable AI (XAI) and mechanistic interpretability in medical applications. In healthcare, AI systems must be transparent and interpretable - doctors and patients need to understand <em>why</em> an AI makes certain decisions, not just what those decisions are. This is crucial for building trust in medical AI systems and ensuring they can be safely deployed in clinical settings. I'm lucky enough to have had internships as an Embedded Engineer, SWE, and an upcoming ML internship â€“ all in the bioengineering/science space (haven't sold out to finance yet).
        </p>
        <p>
          In addition to your standard engineering mathsy modules, I've got skills in:
        </p>
        <ul class="list-disc list-inside space-y-2 ml-4">
          <li>programming (C++, Python, Kotlin)</li>
          <li>deep learning with PyTorch (specialised uni modules, Andrej Karpathy's excellent 'Zero to Hero' series building and training GPT from scratch, projects for Image Segmentation, Registration and Reconstruction)</li>
          <li>solid+fluid mechanics through uni modules (inc. biomechanics, CFD, FEA)</li>
          <li>hardware development experience (projects, uni modules)</li>
        </ul>
      </div>
    </div>
  </div>
</section>

<style>
  /* Base state for animation elements */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.3s ease-out, transform 0.3s ease-out;
  }
  /* State when element becomes visible */
  .animate-on-scroll.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
  /* Simple delay utility classes */
  .delay-100 { transition-delay: 0.05s; }
  .delay-200 { transition-delay: 0.1s; }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // Use GSAP to animate elements when they scroll into view
  document.addEventListener('DOMContentLoaded', () => {
    gsap.utils.toArray<HTMLElement>(".animate-on-scroll").forEach((element) => {
      gsap.to(element, {
        opacity: 1,
        y: 0,
        duration: 0.4,
        ease: "power2.out",
        scrollTrigger: {
          trigger: element,
          start: "top 90%", // Trigger when 90% of the element is visible
          toggleActions: "play none none none", // Play animation once on enter
        }
      });
    });
  });

  // Fallback for non-JS users or if GSAP fails
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
      }
    });
  }, { threshold: 0.2 }); // Trigger when 20% visible

  document.querySelectorAll('.animate-on-scroll').forEach(el => {
    observer.observe(el);
  });
</script>